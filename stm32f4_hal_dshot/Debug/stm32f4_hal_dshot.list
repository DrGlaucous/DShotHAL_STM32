
stm32f4_hal_dshot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002428  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080025c0  080025c0  000125c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025d8  080025d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080025d8  080025d8  000125d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025e0  080025e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025e0  080025e0  000125e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025e4  080025e4  000125e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  080025f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080025f4  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000927a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001845  00000000  00000000  000292b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f0  00000000  00000000  0002ab00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000908  00000000  00000000  0002b4f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015698  00000000  00000000  0002bdf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000822f  00000000  00000000  00041490  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008665b  00000000  00000000  000496bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cfd1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002810  00000000  00000000  000cfd98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080025a8 	.word	0x080025a8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080025a8 	.word	0x080025a8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <MX_DMA_Init+0x3c>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <MX_DMA_Init+0x3c>)
 80004e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b09      	ldr	r3, [pc, #36]	; (8000514 <MX_DMA_Init+0x3c>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2100      	movs	r1, #0
 80004fe:	2039      	movs	r0, #57	; 0x39
 8000500:	f000 fbbf 	bl	8000c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000504:	2039      	movs	r0, #57	; 0x39
 8000506:	f000 fbd8 	bl	8000cba <HAL_NVIC_EnableIRQ>

}
 800050a:	bf00      	nop
 800050c:	3708      	adds	r7, #8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40023800 	.word	0x40023800

08000518 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60fb      	str	r3, [r7, #12]
 8000522:	4b17      	ldr	r3, [pc, #92]	; (8000580 <MX_GPIO_Init+0x68>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a16      	ldr	r2, [pc, #88]	; (8000580 <MX_GPIO_Init+0x68>)
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <MX_GPIO_Init+0x68>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0304 	and.w	r3, r3, #4
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	4b10      	ldr	r3, [pc, #64]	; (8000580 <MX_GPIO_Init+0x68>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a0f      	ldr	r2, [pc, #60]	; (8000580 <MX_GPIO_Init+0x68>)
 8000544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <MX_GPIO_Init+0x68>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	4b09      	ldr	r3, [pc, #36]	; (8000580 <MX_GPIO_Init+0x68>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4a08      	ldr	r2, [pc, #32]	; (8000580 <MX_GPIO_Init+0x68>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <MX_GPIO_Init+0x68>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

}
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40023800 	.word	0x40023800

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fa2e 	bl	80009e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f808 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f7ff ffc2 	bl	8000518 <MX_GPIO_Init>
  MX_DMA_Init();
 8000594:	f7ff ffa0 	bl	80004d8 <MX_DMA_Init>
  MX_TIM1_Init();
 8000598:	f000 f8e0 	bl	800075c <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059c:	e7fe      	b.n	800059c <main+0x18>
	...

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b094      	sub	sp, #80	; 0x50
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2230      	movs	r2, #48	; 0x30
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fff2 	bl	8002598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	4b27      	ldr	r3, [pc, #156]	; (8000668 <SystemClock_Config+0xc8>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	4a26      	ldr	r2, [pc, #152]	; (8000668 <SystemClock_Config+0xc8>)
 80005ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d2:	6413      	str	r3, [r2, #64]	; 0x40
 80005d4:	4b24      	ldr	r3, [pc, #144]	; (8000668 <SystemClock_Config+0xc8>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b21      	ldr	r3, [pc, #132]	; (800066c <SystemClock_Config+0xcc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a20      	ldr	r2, [pc, #128]	; (800066c <SystemClock_Config+0xcc>)
 80005ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b1e      	ldr	r3, [pc, #120]	; (800066c <SystemClock_Config+0xcc>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000604:	2310      	movs	r3, #16
 8000606:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000608:	2302      	movs	r3, #2
 800060a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000610:	2308      	movs	r3, #8
 8000612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000614:	2364      	movs	r3, #100	; 0x64
 8000616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800061c:	2304      	movs	r3, #4
 800061e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	4618      	mov	r0, r3
 8000626:	f000 ffcd 	bl	80015c4 <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000630:	f000 f81e 	bl	8000670 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2302      	movs	r3, #2
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000644:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2103      	movs	r1, #3
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fa27 	bl	8001aa4 <HAL_RCC_ClockConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800065c:	f000 f808 	bl	8000670 <Error_Handler>
  }
}
 8000660:	bf00      	nop
 8000662:	3750      	adds	r7, #80	; 0x50
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000676:	e7fe      	b.n	8000676 <Error_Handler+0x6>

08000678 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <HAL_MspInit+0x4c>)
 8000684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000686:	4a0f      	ldr	r2, [pc, #60]	; (80006c4 <HAL_MspInit+0x4c>)
 8000688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800068c:	6453      	str	r3, [r2, #68]	; 0x44
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <HAL_MspInit+0x4c>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <HAL_MspInit+0x4c>)
 80006a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a2:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <HAL_MspInit+0x4c>)
 80006a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a8:	6413      	str	r3, [r2, #64]	; 0x40
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_MspInit+0x4c>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800

080006c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006cc:	e7fe      	b.n	80006cc <NMI_Handler+0x4>

080006ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <HardFault_Handler+0x4>

080006d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <MemManage_Handler+0x4>

080006da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006de:	e7fe      	b.n	80006de <BusFault_Handler+0x4>

080006e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <UsageFault_Handler+0x4>

080006e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000714:	f000 f9ba 	bl	8000a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}

0800071c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <DMA2_Stream1_IRQHandler+0x10>)
 8000722:	f000 fb93 	bl	8000e4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000028 	.word	0x20000028

08000730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <SystemInit+0x28>)
 8000736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800073a:	4a07      	ldr	r2, [pc, #28]	; (8000758 <SystemInit+0x28>)
 800073c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <SystemInit+0x28>)
 8000746:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800074a:	609a      	str	r2, [r3, #8]
#endif
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b092      	sub	sp, #72	; 0x48
 8000760:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000762:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800076c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
 800077c:	615a      	str	r2, [r3, #20]
 800077e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2220      	movs	r2, #32
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f001 ff06 	bl	8002598 <memset>

  htim1.Instance = TIM1;
 800078c:	4b33      	ldr	r3, [pc, #204]	; (800085c <MX_TIM1_Init+0x100>)
 800078e:	4a34      	ldr	r2, [pc, #208]	; (8000860 <MX_TIM1_Init+0x104>)
 8000790:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000792:	4b32      	ldr	r3, [pc, #200]	; (800085c <MX_TIM1_Init+0x100>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000798:	4b30      	ldr	r3, [pc, #192]	; (800085c <MX_TIM1_Init+0x100>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800079e:	4b2f      	ldr	r3, [pc, #188]	; (800085c <MX_TIM1_Init+0x100>)
 80007a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a6:	4b2d      	ldr	r3, [pc, #180]	; (800085c <MX_TIM1_Init+0x100>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007ac:	4b2b      	ldr	r3, [pc, #172]	; (800085c <MX_TIM1_Init+0x100>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b2:	4b2a      	ldr	r3, [pc, #168]	; (800085c <MX_TIM1_Init+0x100>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007b8:	4828      	ldr	r0, [pc, #160]	; (800085c <MX_TIM1_Init+0x100>)
 80007ba:	f001 fb0b 	bl	8001dd4 <HAL_TIM_PWM_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80007c4:	f7ff ff54 	bl	8000670 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007d4:	4619      	mov	r1, r3
 80007d6:	4821      	ldr	r0, [pc, #132]	; (800085c <MX_TIM1_Init+0x100>)
 80007d8:	f001 fdfa 	bl	80023d0 <HAL_TIMEx_MasterConfigSynchronization>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80007e2:	f7ff ff45 	bl	8000670 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007e6:	2360      	movs	r3, #96	; 0x60
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007f2:	2300      	movs	r3, #0
 80007f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007fa:	2300      	movs	r3, #0
 80007fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007fe:	2300      	movs	r3, #0
 8000800:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000806:	2200      	movs	r2, #0
 8000808:	4619      	mov	r1, r3
 800080a:	4814      	ldr	r0, [pc, #80]	; (800085c <MX_TIM1_Init+0x100>)
 800080c:	f001 fb0e 	bl	8001e2c <HAL_TIM_PWM_ConfigChannel>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000816:	f7ff ff2b 	bl	8000670 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800082e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000832:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4619      	mov	r1, r3
 800083c:	4807      	ldr	r0, [pc, #28]	; (800085c <MX_TIM1_Init+0x100>)
 800083e:	f001 fe35 	bl	80024ac <HAL_TIMEx_ConfigBreakDeadTime>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000848:	f7ff ff12 	bl	8000670 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800084c:	4803      	ldr	r0, [pc, #12]	; (800085c <MX_TIM1_Init+0x100>)
 800084e:	f000 f867 	bl	8000920 <HAL_TIM_MspPostInit>

}
 8000852:	bf00      	nop
 8000854:	3748      	adds	r7, #72	; 0x48
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000088 	.word	0x20000088
 8000860:	40010000 	.word	0x40010000

08000864 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a27      	ldr	r2, [pc, #156]	; (8000910 <HAL_TIM_PWM_MspInit+0xac>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d147      	bne.n	8000906 <HAL_TIM_PWM_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <HAL_TIM_PWM_MspInit+0xb0>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	4a25      	ldr	r2, [pc, #148]	; (8000914 <HAL_TIM_PWM_MspInit+0xb0>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6453      	str	r3, [r2, #68]	; 0x44
 8000886:	4b23      	ldr	r3, [pc, #140]	; (8000914 <HAL_TIM_PWM_MspInit+0xb0>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <HAL_TIM_PWM_MspInit+0xb4>)
 8000894:	4a21      	ldr	r2, [pc, #132]	; (800091c <HAL_TIM_PWM_MspInit+0xb8>)
 8000896:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <HAL_TIM_PWM_MspInit+0xb4>)
 800089a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800089e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <HAL_TIM_PWM_MspInit+0xb4>)
 80008a2:	2240      	movs	r2, #64	; 0x40
 80008a4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <HAL_TIM_PWM_MspInit+0xb4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <HAL_TIM_PWM_MspInit+0xb4>)
 80008ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008b2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <HAL_TIM_PWM_MspInit+0xb4>)
 80008b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008ba:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008bc:	4b16      	ldr	r3, [pc, #88]	; (8000918 <HAL_TIM_PWM_MspInit+0xb4>)
 80008be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008c2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <HAL_TIM_PWM_MspInit+0xb4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <HAL_TIM_PWM_MspInit+0xb4>)
 80008cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008d0:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_TIM_PWM_MspInit+0xb4>)
 80008d4:	2204      	movs	r2, #4
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_tim1_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <HAL_TIM_PWM_MspInit+0xb4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_tim1_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_TIM_PWM_MspInit+0xb4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_tim1_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <HAL_TIM_PWM_MspInit+0xb4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80008ea:	480b      	ldr	r0, [pc, #44]	; (8000918 <HAL_TIM_PWM_MspInit+0xb4>)
 80008ec:	f000 fa00 	bl	8000cf0 <HAL_DMA_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_TIM_PWM_MspInit+0x96>
    {
      Error_Handler();
 80008f6:	f7ff febb 	bl	8000670 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a06      	ldr	r2, [pc, #24]	; (8000918 <HAL_TIM_PWM_MspInit+0xb4>)
 80008fe:	625a      	str	r2, [r3, #36]	; 0x24
 8000900:	4a05      	ldr	r2, [pc, #20]	; (8000918 <HAL_TIM_PWM_MspInit+0xb4>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000906:	bf00      	nop
 8000908:	3710      	adds	r7, #16
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40010000 	.word	0x40010000
 8000914:	40023800 	.word	0x40023800
 8000918:	20000028 	.word	0x20000028
 800091c:	40026428 	.word	0x40026428

08000920 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a12      	ldr	r2, [pc, #72]	; (8000988 <HAL_TIM_MspPostInit+0x68>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d11e      	bne.n	8000980 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <HAL_TIM_MspPostInit+0x6c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a10      	ldr	r2, [pc, #64]	; (800098c <HAL_TIM_MspPostInit+0x6c>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <HAL_TIM_MspPostInit+0x6c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800095e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000962:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000970:	2301      	movs	r3, #1
 8000972:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	4619      	mov	r1, r3
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <HAL_TIM_MspPostInit+0x70>)
 800097c:	f000 fca0 	bl	80012c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000980:	bf00      	nop
 8000982:	3720      	adds	r7, #32
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40010000 	.word	0x40010000
 800098c:	40023800 	.word	0x40023800
 8000990:	40020000 	.word	0x40020000

08000994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000998:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800099a:	e003      	b.n	80009a4 <LoopCopyDataInit>

0800099c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800099e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009a2:	3104      	adds	r1, #4

080009a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009a4:	480b      	ldr	r0, [pc, #44]	; (80009d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009ac:	d3f6      	bcc.n	800099c <CopyDataInit>
  ldr  r2, =_sbss
 80009ae:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009b0:	e002      	b.n	80009b8 <LoopFillZerobss>

080009b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009b4:	f842 3b04 	str.w	r3, [r2], #4

080009b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009bc:	d3f9      	bcc.n	80009b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009be:	f7ff feb7 	bl	8000730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009c2:	f001 fdc5 	bl	8002550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009c6:	f7ff fddd 	bl	8000584 <main>
  bx  lr    
 80009ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80009d0:	080025e8 	.word	0x080025e8
  ldr  r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009d8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80009dc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80009e0:	200000cc 	.word	0x200000cc

080009e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC_IRQHandler>
	...

080009e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0d      	ldr	r2, [pc, #52]	; (8000a28 <HAL_Init+0x40>)
 80009f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f8:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <HAL_Init+0x40>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <HAL_Init+0x40>)
 80009fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a07      	ldr	r2, [pc, #28]	; (8000a28 <HAL_Init+0x40>)
 8000a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a10:	2003      	movs	r0, #3
 8000a12:	f000 f92b 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f000 f808 	bl	8000a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1c:	f7ff fe2c 	bl	8000678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023c00 	.word	0x40023c00

08000a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_InitTick+0x54>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_InitTick+0x58>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f943 	bl	8000cd6 <HAL_SYSTICK_Config>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e00e      	b.n	8000a78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b0f      	cmp	r3, #15
 8000a5e:	d80a      	bhi.n	8000a76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a60:	2200      	movs	r2, #0
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295
 8000a68:	f000 f90b 	bl	8000c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a6c:	4a06      	ldr	r2, [pc, #24]	; (8000a88 <HAL_InitTick+0x5c>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a72:	2300      	movs	r3, #0
 8000a74:	e000      	b.n	8000a78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000000 	.word	0x20000000
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20000004 	.word	0x20000004

08000a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_IncTick+0x20>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x24>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <HAL_IncTick+0x24>)
 8000a9e:	6013      	str	r3, [r2, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	200000c8 	.word	0x200000c8

08000ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <HAL_GetTick+0x14>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	200000c8 	.word	0x200000c8

08000acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afe:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	60d3      	str	r3, [r2, #12]
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <__NVIC_GetPriorityGrouping+0x18>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	0a1b      	lsrs	r3, r3, #8
 8000b1e:	f003 0307 	and.w	r3, r3, #7
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	db0b      	blt.n	8000b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	f003 021f 	and.w	r2, r3, #31
 8000b48:	4907      	ldr	r1, [pc, #28]	; (8000b68 <__NVIC_EnableIRQ+0x38>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	095b      	lsrs	r3, r3, #5
 8000b50:	2001      	movs	r0, #1
 8000b52:	fa00 f202 	lsl.w	r2, r0, r2
 8000b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000e100 	.word	0xe000e100

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	; (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf28      	it	cs
 8000bde:	2304      	movcs	r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d902      	bls.n	8000bf0 <NVIC_EncodePriority+0x30>
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3b03      	subs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <NVIC_EncodePriority+0x32>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43d9      	mvns	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4313      	orrs	r3, r2
         );
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	; 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f7ff ff8e 	bl	8000b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff29 	bl	8000acc <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c94:	f7ff ff3e 	bl	8000b14 <__NVIC_GetPriorityGrouping>
 8000c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff ff8e 	bl	8000bc0 <NVIC_EncodePriority>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff5d 	bl	8000b6c <__NVIC_SetPriority>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff31 	bl	8000b30 <__NVIC_EnableIRQ>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ffa2 	bl	8000c28 <SysTick_Config>
 8000ce4:	4603      	mov	r3, r0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000cfc:	f7ff feda 	bl	8000ab4 <HAL_GetTick>
 8000d00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d101      	bne.n	8000d0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e099      	b.n	8000e40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2202      	movs	r2, #2
 8000d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f022 0201 	bic.w	r2, r2, #1
 8000d2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d2c:	e00f      	b.n	8000d4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d2e:	f7ff fec1 	bl	8000ab4 <HAL_GetTick>
 8000d32:	4602      	mov	r2, r0
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	2b05      	cmp	r3, #5
 8000d3a:	d908      	bls.n	8000d4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2220      	movs	r2, #32
 8000d40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2203      	movs	r2, #3
 8000d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e078      	b.n	8000e40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1e8      	bne.n	8000d2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	4b38      	ldr	r3, [pc, #224]	; (8000e48 <HAL_DMA_Init+0x158>)
 8000d68:	4013      	ands	r3, r2
 8000d6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a1b      	ldr	r3, [r3, #32]
 8000d98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	d107      	bne.n	8000db8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	4313      	orrs	r3, r2
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	f023 0307 	bic.w	r3, r3, #7
 8000dce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dde:	2b04      	cmp	r3, #4
 8000de0:	d117      	bne.n	8000e12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d00e      	beq.n	8000e12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f000 f9e9 	bl	80011cc <DMA_CheckFifoParam>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d008      	beq.n	8000e12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2240      	movs	r2, #64	; 0x40
 8000e04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e016      	b.n	8000e40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f000 f9a0 	bl	8001160 <DMA_CalcBaseAndBitshift>
 8000e20:	4603      	mov	r3, r0
 8000e22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e28:	223f      	movs	r2, #63	; 0x3f
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	f010803f 	.word	0xf010803f

08000e4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000e58:	4b92      	ldr	r3, [pc, #584]	; (80010a4 <HAL_DMA_IRQHandler+0x258>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a92      	ldr	r2, [pc, #584]	; (80010a8 <HAL_DMA_IRQHandler+0x25c>)
 8000e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e62:	0a9b      	lsrs	r3, r3, #10
 8000e64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e76:	2208      	movs	r2, #8
 8000e78:	409a      	lsls	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d01a      	beq.n	8000eb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d013      	beq.n	8000eb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 0204 	bic.w	r2, r2, #4
 8000e9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ea4:	2208      	movs	r2, #8
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000eb0:	f043 0201 	orr.w	r2, r3, #1
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d012      	beq.n	8000eee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00b      	beq.n	8000eee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000eda:	2201      	movs	r2, #1
 8000edc:	409a      	lsls	r2, r3
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ee6:	f043 0202 	orr.w	r2, r3, #2
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	409a      	lsls	r2, r3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d012      	beq.n	8000f24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f10:	2204      	movs	r2, #4
 8000f12:	409a      	lsls	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f1c:	f043 0204 	orr.w	r2, r3, #4
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f28:	2210      	movs	r2, #16
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d043      	beq.n	8000fbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d03c      	beq.n	8000fbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f46:	2210      	movs	r2, #16
 8000f48:	409a      	lsls	r2, r3
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d018      	beq.n	8000f8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d108      	bne.n	8000f7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d024      	beq.n	8000fbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	4798      	blx	r3
 8000f7a:	e01f      	b.n	8000fbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d01b      	beq.n	8000fbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	4798      	blx	r3
 8000f8c:	e016      	b.n	8000fbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d107      	bne.n	8000fac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f022 0208 	bic.w	r2, r2, #8
 8000faa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fc0:	2220      	movs	r2, #32
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 808e 	beq.w	80010ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0310 	and.w	r3, r3, #16
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	f000 8086 	beq.w	80010ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fe2:	2220      	movs	r2, #32
 8000fe4:	409a      	lsls	r2, r3
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b05      	cmp	r3, #5
 8000ff4:	d136      	bne.n	8001064 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 0216 	bic.w	r2, r2, #22
 8001004:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	695a      	ldr	r2, [r3, #20]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001014:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	2b00      	cmp	r3, #0
 800101c:	d103      	bne.n	8001026 <HAL_DMA_IRQHandler+0x1da>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001022:	2b00      	cmp	r3, #0
 8001024:	d007      	beq.n	8001036 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0208 	bic.w	r2, r2, #8
 8001034:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800103a:	223f      	movs	r2, #63	; 0x3f
 800103c:	409a      	lsls	r2, r3
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2201      	movs	r2, #1
 800104e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001056:	2b00      	cmp	r3, #0
 8001058:	d07d      	beq.n	8001156 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	4798      	blx	r3
        }
        return;
 8001062:	e078      	b.n	8001156 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d01c      	beq.n	80010ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d108      	bne.n	8001092 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001084:	2b00      	cmp	r3, #0
 8001086:	d030      	beq.n	80010ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	4798      	blx	r3
 8001090:	e02b      	b.n	80010ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001096:	2b00      	cmp	r3, #0
 8001098:	d027      	beq.n	80010ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	4798      	blx	r3
 80010a2:	e022      	b.n	80010ea <HAL_DMA_IRQHandler+0x29e>
 80010a4:	20000000 	.word	0x20000000
 80010a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10f      	bne.n	80010da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0210 	bic.w	r2, r2, #16
 80010c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d032      	beq.n	8001158 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d022      	beq.n	8001144 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2205      	movs	r2, #5
 8001102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0201 	bic.w	r2, r2, #1
 8001114:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	3301      	adds	r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	429a      	cmp	r2, r3
 8001120:	d307      	bcc.n	8001132 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f2      	bne.n	8001116 <HAL_DMA_IRQHandler+0x2ca>
 8001130:	e000      	b.n	8001134 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001132:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	4798      	blx	r3
 8001154:	e000      	b.n	8001158 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001156:	bf00      	nop
    }
  }
}
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop

08001160 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	3b10      	subs	r3, #16
 8001170:	4a14      	ldr	r2, [pc, #80]	; (80011c4 <DMA_CalcBaseAndBitshift+0x64>)
 8001172:	fba2 2303 	umull	r2, r3, r2, r3
 8001176:	091b      	lsrs	r3, r3, #4
 8001178:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800117a:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <DMA_CalcBaseAndBitshift+0x68>)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2b03      	cmp	r3, #3
 800118c:	d909      	bls.n	80011a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001196:	f023 0303 	bic.w	r3, r3, #3
 800119a:	1d1a      	adds	r2, r3, #4
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	659a      	str	r2, [r3, #88]	; 0x58
 80011a0:	e007      	b.n	80011b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80011aa:	f023 0303 	bic.w	r3, r3, #3
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	aaaaaaab 	.word	0xaaaaaaab
 80011c8:	080025d0 	.word	0x080025d0

080011cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d11f      	bne.n	8001226 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d855      	bhi.n	8001298 <DMA_CheckFifoParam+0xcc>
 80011ec:	a201      	add	r2, pc, #4	; (adr r2, 80011f4 <DMA_CheckFifoParam+0x28>)
 80011ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f2:	bf00      	nop
 80011f4:	08001205 	.word	0x08001205
 80011f8:	08001217 	.word	0x08001217
 80011fc:	08001205 	.word	0x08001205
 8001200:	08001299 	.word	0x08001299
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d045      	beq.n	800129c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001214:	e042      	b.n	800129c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800121e:	d13f      	bne.n	80012a0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001224:	e03c      	b.n	80012a0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800122e:	d121      	bne.n	8001274 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	2b03      	cmp	r3, #3
 8001234:	d836      	bhi.n	80012a4 <DMA_CheckFifoParam+0xd8>
 8001236:	a201      	add	r2, pc, #4	; (adr r2, 800123c <DMA_CheckFifoParam+0x70>)
 8001238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123c:	0800124d 	.word	0x0800124d
 8001240:	08001253 	.word	0x08001253
 8001244:	0800124d 	.word	0x0800124d
 8001248:	08001265 	.word	0x08001265
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	73fb      	strb	r3, [r7, #15]
      break;
 8001250:	e02f      	b.n	80012b2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001256:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d024      	beq.n	80012a8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001262:	e021      	b.n	80012a8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001268:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800126c:	d11e      	bne.n	80012ac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001272:	e01b      	b.n	80012ac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d902      	bls.n	8001280 <DMA_CheckFifoParam+0xb4>
 800127a:	2b03      	cmp	r3, #3
 800127c:	d003      	beq.n	8001286 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800127e:	e018      	b.n	80012b2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	73fb      	strb	r3, [r7, #15]
      break;
 8001284:	e015      	b.n	80012b2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00e      	beq.n	80012b0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	73fb      	strb	r3, [r7, #15]
      break;
 8001296:	e00b      	b.n	80012b0 <DMA_CheckFifoParam+0xe4>
      break;
 8001298:	bf00      	nop
 800129a:	e00a      	b.n	80012b2 <DMA_CheckFifoParam+0xe6>
      break;
 800129c:	bf00      	nop
 800129e:	e008      	b.n	80012b2 <DMA_CheckFifoParam+0xe6>
      break;
 80012a0:	bf00      	nop
 80012a2:	e006      	b.n	80012b2 <DMA_CheckFifoParam+0xe6>
      break;
 80012a4:	bf00      	nop
 80012a6:	e004      	b.n	80012b2 <DMA_CheckFifoParam+0xe6>
      break;
 80012a8:	bf00      	nop
 80012aa:	e002      	b.n	80012b2 <DMA_CheckFifoParam+0xe6>
      break;   
 80012ac:	bf00      	nop
 80012ae:	e000      	b.n	80012b2 <DMA_CheckFifoParam+0xe6>
      break;
 80012b0:	bf00      	nop
    }
  } 
  
  return status; 
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	e159      	b.n	8001590 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012dc:	2201      	movs	r2, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	f040 8148 	bne.w	800158a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d00b      	beq.n	800131a <HAL_GPIO_Init+0x5a>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d007      	beq.n	800131a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800130e:	2b11      	cmp	r3, #17
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b12      	cmp	r3, #18
 8001318:	d130      	bne.n	800137c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	2203      	movs	r2, #3
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001350:	2201      	movs	r2, #1
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 0201 	and.w	r2, r3, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0xfc>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b12      	cmp	r3, #18
 80013ba:	d123      	bne.n	8001404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	08da      	lsrs	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3208      	adds	r2, #8
 80013c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	220f      	movs	r2, #15
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	08da      	lsrs	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3208      	adds	r2, #8
 80013fe:	69b9      	ldr	r1, [r7, #24]
 8001400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0203 	and.w	r2, r3, #3
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 80a2 	beq.w	800158a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b56      	ldr	r3, [pc, #344]	; (80015a4 <HAL_GPIO_Init+0x2e4>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	4a55      	ldr	r2, [pc, #340]	; (80015a4 <HAL_GPIO_Init+0x2e4>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001454:	6453      	str	r3, [r2, #68]	; 0x44
 8001456:	4b53      	ldr	r3, [pc, #332]	; (80015a4 <HAL_GPIO_Init+0x2e4>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001462:	4a51      	ldr	r2, [pc, #324]	; (80015a8 <HAL_GPIO_Init+0x2e8>)
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	3302      	adds	r3, #2
 800146a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	220f      	movs	r2, #15
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a48      	ldr	r2, [pc, #288]	; (80015ac <HAL_GPIO_Init+0x2ec>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d019      	beq.n	80014c2 <HAL_GPIO_Init+0x202>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a47      	ldr	r2, [pc, #284]	; (80015b0 <HAL_GPIO_Init+0x2f0>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d013      	beq.n	80014be <HAL_GPIO_Init+0x1fe>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a46      	ldr	r2, [pc, #280]	; (80015b4 <HAL_GPIO_Init+0x2f4>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d00d      	beq.n	80014ba <HAL_GPIO_Init+0x1fa>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a45      	ldr	r2, [pc, #276]	; (80015b8 <HAL_GPIO_Init+0x2f8>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d007      	beq.n	80014b6 <HAL_GPIO_Init+0x1f6>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a44      	ldr	r2, [pc, #272]	; (80015bc <HAL_GPIO_Init+0x2fc>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_GPIO_Init+0x1f2>
 80014ae:	2304      	movs	r3, #4
 80014b0:	e008      	b.n	80014c4 <HAL_GPIO_Init+0x204>
 80014b2:	2307      	movs	r3, #7
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x204>
 80014b6:	2303      	movs	r3, #3
 80014b8:	e004      	b.n	80014c4 <HAL_GPIO_Init+0x204>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e002      	b.n	80014c4 <HAL_GPIO_Init+0x204>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <HAL_GPIO_Init+0x204>
 80014c2:	2300      	movs	r3, #0
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	f002 0203 	and.w	r2, r2, #3
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	4093      	lsls	r3, r2
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d4:	4934      	ldr	r1, [pc, #208]	; (80015a8 <HAL_GPIO_Init+0x2e8>)
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	089b      	lsrs	r3, r3, #2
 80014da:	3302      	adds	r3, #2
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e2:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <HAL_GPIO_Init+0x300>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001506:	4a2e      	ldr	r2, [pc, #184]	; (80015c0 <HAL_GPIO_Init+0x300>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800150c:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <HAL_GPIO_Init+0x300>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001530:	4a23      	ldr	r2, [pc, #140]	; (80015c0 <HAL_GPIO_Init+0x300>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <HAL_GPIO_Init+0x300>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800155a:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <HAL_GPIO_Init+0x300>)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <HAL_GPIO_Init+0x300>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001584:	4a0e      	ldr	r2, [pc, #56]	; (80015c0 <HAL_GPIO_Init+0x300>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3301      	adds	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	2b0f      	cmp	r3, #15
 8001594:	f67f aea2 	bls.w	80012dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001598:	bf00      	nop
 800159a:	3724      	adds	r7, #36	; 0x24
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40013800 	.word	0x40013800
 80015ac:	40020000 	.word	0x40020000
 80015b0:	40020400 	.word	0x40020400
 80015b4:	40020800 	.word	0x40020800
 80015b8:	40020c00 	.word	0x40020c00
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40013c00 	.word	0x40013c00

080015c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e25b      	b.n	8001a8e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d075      	beq.n	80016ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015e2:	4ba3      	ldr	r3, [pc, #652]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d00c      	beq.n	8001608 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ee:	4ba0      	ldr	r3, [pc, #640]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015f6:	2b08      	cmp	r3, #8
 80015f8:	d112      	bne.n	8001620 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015fa:	4b9d      	ldr	r3, [pc, #628]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001606:	d10b      	bne.n	8001620 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001608:	4b99      	ldr	r3, [pc, #612]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d05b      	beq.n	80016cc <HAL_RCC_OscConfig+0x108>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d157      	bne.n	80016cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e236      	b.n	8001a8e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001628:	d106      	bne.n	8001638 <HAL_RCC_OscConfig+0x74>
 800162a:	4b91      	ldr	r3, [pc, #580]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a90      	ldr	r2, [pc, #576]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e01d      	b.n	8001674 <HAL_RCC_OscConfig+0xb0>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0x98>
 8001642:	4b8b      	ldr	r3, [pc, #556]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a8a      	ldr	r2, [pc, #552]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 8001648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b88      	ldr	r3, [pc, #544]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a87      	ldr	r2, [pc, #540]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 8001654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e00b      	b.n	8001674 <HAL_RCC_OscConfig+0xb0>
 800165c:	4b84      	ldr	r3, [pc, #528]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a83      	ldr	r2, [pc, #524]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 8001662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b81      	ldr	r3, [pc, #516]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a80      	ldr	r2, [pc, #512]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 800166e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d013      	beq.n	80016a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fa1a 	bl	8000ab4 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fa16 	bl	8000ab4 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e1fb      	b.n	8001a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001696:	4b76      	ldr	r3, [pc, #472]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0xc0>
 80016a2:	e014      	b.n	80016ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fa06 	bl	8000ab4 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fa02 	bl	8000ab4 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e1e7      	b.n	8001a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016be:	4b6c      	ldr	r3, [pc, #432]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0xe8>
 80016ca:	e000      	b.n	80016ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d063      	beq.n	80017a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016da:	4b65      	ldr	r3, [pc, #404]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00b      	beq.n	80016fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016e6:	4b62      	ldr	r3, [pc, #392]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ee:	2b08      	cmp	r3, #8
 80016f0:	d11c      	bne.n	800172c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016f2:	4b5f      	ldr	r3, [pc, #380]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d116      	bne.n	800172c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016fe:	4b5c      	ldr	r3, [pc, #368]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d005      	beq.n	8001716 <HAL_RCC_OscConfig+0x152>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d001      	beq.n	8001716 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e1bb      	b.n	8001a8e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001716:	4b56      	ldr	r3, [pc, #344]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	4952      	ldr	r1, [pc, #328]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172a:	e03a      	b.n	80017a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d020      	beq.n	8001776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001734:	4b4f      	ldr	r3, [pc, #316]	; (8001874 <HAL_RCC_OscConfig+0x2b0>)
 8001736:	2201      	movs	r2, #1
 8001738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173a:	f7ff f9bb 	bl	8000ab4 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001742:	f7ff f9b7 	bl	8000ab4 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e19c      	b.n	8001a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001754:	4b46      	ldr	r3, [pc, #280]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001760:	4b43      	ldr	r3, [pc, #268]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4940      	ldr	r1, [pc, #256]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]
 8001774:	e015      	b.n	80017a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001776:	4b3f      	ldr	r3, [pc, #252]	; (8001874 <HAL_RCC_OscConfig+0x2b0>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff f99a 	bl	8000ab4 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001784:	f7ff f996 	bl	8000ab4 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e17b      	b.n	8001a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001796:	4b36      	ldr	r3, [pc, #216]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d030      	beq.n	8001810 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d016      	beq.n	80017e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b6:	4b30      	ldr	r3, [pc, #192]	; (8001878 <HAL_RCC_OscConfig+0x2b4>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017bc:	f7ff f97a 	bl	8000ab4 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c4:	f7ff f976 	bl	8000ab4 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e15b      	b.n	8001a8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d6:	4b26      	ldr	r3, [pc, #152]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x200>
 80017e2:	e015      	b.n	8001810 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e4:	4b24      	ldr	r3, [pc, #144]	; (8001878 <HAL_RCC_OscConfig+0x2b4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ea:	f7ff f963 	bl	8000ab4 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f2:	f7ff f95f 	bl	8000ab4 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e144      	b.n	8001a8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001804:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 8001806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f0      	bne.n	80017f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	f000 80a0 	beq.w	800195e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10f      	bne.n	800184e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <HAL_RCC_OscConfig+0x2ac>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800184a:	2301      	movs	r3, #1
 800184c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_RCC_OscConfig+0x2b8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d121      	bne.n	800189e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_RCC_OscConfig+0x2b8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a07      	ldr	r2, [pc, #28]	; (800187c <HAL_RCC_OscConfig+0x2b8>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001866:	f7ff f925 	bl	8000ab4 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	e011      	b.n	8001892 <HAL_RCC_OscConfig+0x2ce>
 800186e:	bf00      	nop
 8001870:	40023800 	.word	0x40023800
 8001874:	42470000 	.word	0x42470000
 8001878:	42470e80 	.word	0x42470e80
 800187c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001880:	f7ff f918 	bl	8000ab4 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e0fd      	b.n	8001a8e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001892:	4b81      	ldr	r3, [pc, #516]	; (8001a98 <HAL_RCC_OscConfig+0x4d4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d106      	bne.n	80018b4 <HAL_RCC_OscConfig+0x2f0>
 80018a6:	4b7d      	ldr	r3, [pc, #500]	; (8001a9c <HAL_RCC_OscConfig+0x4d8>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018aa:	4a7c      	ldr	r2, [pc, #496]	; (8001a9c <HAL_RCC_OscConfig+0x4d8>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6713      	str	r3, [r2, #112]	; 0x70
 80018b2:	e01c      	b.n	80018ee <HAL_RCC_OscConfig+0x32a>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b05      	cmp	r3, #5
 80018ba:	d10c      	bne.n	80018d6 <HAL_RCC_OscConfig+0x312>
 80018bc:	4b77      	ldr	r3, [pc, #476]	; (8001a9c <HAL_RCC_OscConfig+0x4d8>)
 80018be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c0:	4a76      	ldr	r2, [pc, #472]	; (8001a9c <HAL_RCC_OscConfig+0x4d8>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	6713      	str	r3, [r2, #112]	; 0x70
 80018c8:	4b74      	ldr	r3, [pc, #464]	; (8001a9c <HAL_RCC_OscConfig+0x4d8>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018cc:	4a73      	ldr	r2, [pc, #460]	; (8001a9c <HAL_RCC_OscConfig+0x4d8>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6713      	str	r3, [r2, #112]	; 0x70
 80018d4:	e00b      	b.n	80018ee <HAL_RCC_OscConfig+0x32a>
 80018d6:	4b71      	ldr	r3, [pc, #452]	; (8001a9c <HAL_RCC_OscConfig+0x4d8>)
 80018d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018da:	4a70      	ldr	r2, [pc, #448]	; (8001a9c <HAL_RCC_OscConfig+0x4d8>)
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	6713      	str	r3, [r2, #112]	; 0x70
 80018e2:	4b6e      	ldr	r3, [pc, #440]	; (8001a9c <HAL_RCC_OscConfig+0x4d8>)
 80018e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e6:	4a6d      	ldr	r2, [pc, #436]	; (8001a9c <HAL_RCC_OscConfig+0x4d8>)
 80018e8:	f023 0304 	bic.w	r3, r3, #4
 80018ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d015      	beq.n	8001922 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f6:	f7ff f8dd 	bl	8000ab4 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fc:	e00a      	b.n	8001914 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fe:	f7ff f8d9 	bl	8000ab4 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	f241 3288 	movw	r2, #5000	; 0x1388
 800190c:	4293      	cmp	r3, r2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e0bc      	b.n	8001a8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001914:	4b61      	ldr	r3, [pc, #388]	; (8001a9c <HAL_RCC_OscConfig+0x4d8>)
 8001916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0ee      	beq.n	80018fe <HAL_RCC_OscConfig+0x33a>
 8001920:	e014      	b.n	800194c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001922:	f7ff f8c7 	bl	8000ab4 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001928:	e00a      	b.n	8001940 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192a:	f7ff f8c3 	bl	8000ab4 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	f241 3288 	movw	r2, #5000	; 0x1388
 8001938:	4293      	cmp	r3, r2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e0a6      	b.n	8001a8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001940:	4b56      	ldr	r3, [pc, #344]	; (8001a9c <HAL_RCC_OscConfig+0x4d8>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1ee      	bne.n	800192a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d105      	bne.n	800195e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001952:	4b52      	ldr	r3, [pc, #328]	; (8001a9c <HAL_RCC_OscConfig+0x4d8>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	4a51      	ldr	r2, [pc, #324]	; (8001a9c <HAL_RCC_OscConfig+0x4d8>)
 8001958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800195c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 8092 	beq.w	8001a8c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001968:	4b4c      	ldr	r3, [pc, #304]	; (8001a9c <HAL_RCC_OscConfig+0x4d8>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 030c 	and.w	r3, r3, #12
 8001970:	2b08      	cmp	r3, #8
 8001972:	d05c      	beq.n	8001a2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d141      	bne.n	8001a00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197c:	4b48      	ldr	r3, [pc, #288]	; (8001aa0 <HAL_RCC_OscConfig+0x4dc>)
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001982:	f7ff f897 	bl	8000ab4 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198a:	f7ff f893 	bl	8000ab4 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e078      	b.n	8001a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199c:	4b3f      	ldr	r3, [pc, #252]	; (8001a9c <HAL_RCC_OscConfig+0x4d8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f0      	bne.n	800198a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69da      	ldr	r2, [r3, #28]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	019b      	lsls	r3, r3, #6
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	085b      	lsrs	r3, r3, #1
 80019c0:	3b01      	subs	r3, #1
 80019c2:	041b      	lsls	r3, r3, #16
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	061b      	lsls	r3, r3, #24
 80019cc:	4933      	ldr	r1, [pc, #204]	; (8001a9c <HAL_RCC_OscConfig+0x4d8>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019d2:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <HAL_RCC_OscConfig+0x4dc>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff f86c 	bl	8000ab4 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e0:	f7ff f868 	bl	8000ab4 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e04d      	b.n	8001a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019f2:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <HAL_RCC_OscConfig+0x4d8>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x41c>
 80019fe:	e045      	b.n	8001a8c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a00:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <HAL_RCC_OscConfig+0x4dc>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a06:	f7ff f855 	bl	8000ab4 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0e:	f7ff f851 	bl	8000ab4 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e036      	b.n	8001a8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <HAL_RCC_OscConfig+0x4d8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f0      	bne.n	8001a0e <HAL_RCC_OscConfig+0x44a>
 8001a2c:	e02e      	b.n	8001a8c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e029      	b.n	8001a8e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a3a:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_RCC_OscConfig+0x4d8>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d11c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d115      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a62:	4013      	ands	r3, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d10d      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d106      	bne.n	8001a88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40007000 	.word	0x40007000
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	42470060 	.word	0x42470060

08001aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0cc      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b68      	ldr	r3, [pc, #416]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d90c      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b65      	ldr	r3, [pc, #404]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ace:	4b63      	ldr	r3, [pc, #396]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0b8      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d020      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0304 	and.w	r3, r3, #4
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af8:	4b59      	ldr	r3, [pc, #356]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a58      	ldr	r2, [pc, #352]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b10:	4b53      	ldr	r3, [pc, #332]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4a52      	ldr	r2, [pc, #328]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b1c:	4b50      	ldr	r3, [pc, #320]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	494d      	ldr	r1, [pc, #308]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d044      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d119      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e07f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d003      	beq.n	8001b62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b62:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e06f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b72:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e067      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b82:	4b37      	ldr	r3, [pc, #220]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f023 0203 	bic.w	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4934      	ldr	r1, [pc, #208]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b94:	f7fe ff8e 	bl	8000ab4 <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9c:	f7fe ff8a 	bl	8000ab4 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e04f      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 020c 	and.w	r2, r3, #12
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d1eb      	bne.n	8001b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d20c      	bcs.n	8001bec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_RCC_ClockConfig+0x1b8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d001      	beq.n	8001bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e032      	b.n	8001c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d008      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	4916      	ldr	r1, [pc, #88]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d009      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	490e      	ldr	r1, [pc, #56]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c2a:	f000 f821 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001c2e:	4601      	mov	r1, r0
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	5cd3      	ldrb	r3, [r2, r3]
 8001c3e:	fa21 f303 	lsr.w	r3, r1, r3
 8001c42:	4a09      	ldr	r2, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c46:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <HAL_RCC_ClockConfig+0x1c8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe feee 	bl	8000a2c <HAL_InitTick>

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00
 8001c60:	40023800 	.word	0x40023800
 8001c64:	080025c0 	.word	0x080025c0
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000004 	.word	0x20000004

08001c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c86:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d007      	beq.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x32>
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d008      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x38>
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f040 808d 	bne.w	8001db6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c9c:	4b4b      	ldr	r3, [pc, #300]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x15c>)
 8001c9e:	60bb      	str	r3, [r7, #8]
       break;
 8001ca0:	e08c      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ca2:	4b4b      	ldr	r3, [pc, #300]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ca4:	60bb      	str	r3, [r7, #8]
      break;
 8001ca6:	e089      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ca8:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cb2:	4b45      	ldr	r3, [pc, #276]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d023      	beq.n	8001d06 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cbe:	4b42      	ldr	r3, [pc, #264]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	099b      	lsrs	r3, r3, #6
 8001cc4:	f04f 0400 	mov.w	r4, #0
 8001cc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	ea03 0501 	and.w	r5, r3, r1
 8001cd4:	ea04 0602 	and.w	r6, r4, r2
 8001cd8:	4a3d      	ldr	r2, [pc, #244]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cda:	fb02 f106 	mul.w	r1, r2, r6
 8001cde:	2200      	movs	r2, #0
 8001ce0:	fb02 f205 	mul.w	r2, r2, r5
 8001ce4:	440a      	add	r2, r1
 8001ce6:	493a      	ldr	r1, [pc, #232]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ce8:	fba5 0101 	umull	r0, r1, r5, r1
 8001cec:	1853      	adds	r3, r2, r1
 8001cee:	4619      	mov	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f04f 0400 	mov.w	r4, #0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4623      	mov	r3, r4
 8001cfa:	f7fe fa6d 	bl	80001d8 <__aeabi_uldivmod>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	460c      	mov	r4, r1
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	e049      	b.n	8001d9a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d06:	4b30      	ldr	r3, [pc, #192]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	099b      	lsrs	r3, r3, #6
 8001d0c:	f04f 0400 	mov.w	r4, #0
 8001d10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	ea03 0501 	and.w	r5, r3, r1
 8001d1c:	ea04 0602 	and.w	r6, r4, r2
 8001d20:	4629      	mov	r1, r5
 8001d22:	4632      	mov	r2, r6
 8001d24:	f04f 0300 	mov.w	r3, #0
 8001d28:	f04f 0400 	mov.w	r4, #0
 8001d2c:	0154      	lsls	r4, r2, #5
 8001d2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d32:	014b      	lsls	r3, r1, #5
 8001d34:	4619      	mov	r1, r3
 8001d36:	4622      	mov	r2, r4
 8001d38:	1b49      	subs	r1, r1, r5
 8001d3a:	eb62 0206 	sbc.w	r2, r2, r6
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	f04f 0400 	mov.w	r4, #0
 8001d46:	0194      	lsls	r4, r2, #6
 8001d48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d4c:	018b      	lsls	r3, r1, #6
 8001d4e:	1a5b      	subs	r3, r3, r1
 8001d50:	eb64 0402 	sbc.w	r4, r4, r2
 8001d54:	f04f 0100 	mov.w	r1, #0
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	00e2      	lsls	r2, r4, #3
 8001d5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d62:	00d9      	lsls	r1, r3, #3
 8001d64:	460b      	mov	r3, r1
 8001d66:	4614      	mov	r4, r2
 8001d68:	195b      	adds	r3, r3, r5
 8001d6a:	eb44 0406 	adc.w	r4, r4, r6
 8001d6e:	f04f 0100 	mov.w	r1, #0
 8001d72:	f04f 0200 	mov.w	r2, #0
 8001d76:	02a2      	lsls	r2, r4, #10
 8001d78:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d7c:	0299      	lsls	r1, r3, #10
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4614      	mov	r4, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	4621      	mov	r1, r4
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f04f 0400 	mov.w	r4, #0
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4623      	mov	r3, r4
 8001d90:	f7fe fa22 	bl	80001d8 <__aeabi_uldivmod>
 8001d94:	4603      	mov	r3, r0
 8001d96:	460c      	mov	r4, r1
 8001d98:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	0c1b      	lsrs	r3, r3, #16
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	3301      	adds	r3, #1
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db2:	60bb      	str	r3, [r7, #8]
      break;
 8001db4:	e002      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x15c>)
 8001db8:	60bb      	str	r3, [r7, #8]
      break;
 8001dba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dbc:	68bb      	ldr	r3, [r7, #8]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	00f42400 	.word	0x00f42400
 8001dd0:	017d7840 	.word	0x017d7840

08001dd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e01d      	b.n	8001e22 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d106      	bne.n	8001e00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7fe fd32 	bl	8000864 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3304      	adds	r3, #4
 8001e10:	4619      	mov	r1, r3
 8001e12:	4610      	mov	r0, r2
 8001e14:	f000 f8d0 	bl	8001fb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e0b4      	b.n	8001fb0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2202      	movs	r2, #2
 8001e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b0c      	cmp	r3, #12
 8001e5a:	f200 809f 	bhi.w	8001f9c <HAL_TIM_PWM_ConfigChannel+0x170>
 8001e5e:	a201      	add	r2, pc, #4	; (adr r2, 8001e64 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e64:	08001e99 	.word	0x08001e99
 8001e68:	08001f9d 	.word	0x08001f9d
 8001e6c:	08001f9d 	.word	0x08001f9d
 8001e70:	08001f9d 	.word	0x08001f9d
 8001e74:	08001ed9 	.word	0x08001ed9
 8001e78:	08001f9d 	.word	0x08001f9d
 8001e7c:	08001f9d 	.word	0x08001f9d
 8001e80:	08001f9d 	.word	0x08001f9d
 8001e84:	08001f1b 	.word	0x08001f1b
 8001e88:	08001f9d 	.word	0x08001f9d
 8001e8c:	08001f9d 	.word	0x08001f9d
 8001e90:	08001f9d 	.word	0x08001f9d
 8001e94:	08001f5b 	.word	0x08001f5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 f90a 	bl	80020b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699a      	ldr	r2, [r3, #24]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0208 	orr.w	r2, r2, #8
 8001eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699a      	ldr	r2, [r3, #24]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0204 	bic.w	r2, r2, #4
 8001ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6999      	ldr	r1, [r3, #24]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	619a      	str	r2, [r3, #24]
      break;
 8001ed6:	e062      	b.n	8001f9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68b9      	ldr	r1, [r7, #8]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f000 f950 	bl	8002184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699a      	ldr	r2, [r3, #24]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	699a      	ldr	r2, [r3, #24]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6999      	ldr	r1, [r3, #24]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	021a      	lsls	r2, r3, #8
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	619a      	str	r2, [r3, #24]
      break;
 8001f18:	e041      	b.n	8001f9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68b9      	ldr	r1, [r7, #8]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 f99b 	bl	800225c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	69da      	ldr	r2, [r3, #28]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0208 	orr.w	r2, r2, #8
 8001f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	69da      	ldr	r2, [r3, #28]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0204 	bic.w	r2, r2, #4
 8001f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	69d9      	ldr	r1, [r3, #28]
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	430a      	orrs	r2, r1
 8001f56:	61da      	str	r2, [r3, #28]
      break;
 8001f58:	e021      	b.n	8001f9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68b9      	ldr	r1, [r7, #8]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 f9e5 	bl	8002330 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	69da      	ldr	r2, [r3, #28]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	69da      	ldr	r2, [r3, #28]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	69d9      	ldr	r1, [r3, #28]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	021a      	lsls	r2, r3, #8
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	61da      	str	r2, [r3, #28]
      break;
 8001f9a:	e000      	b.n	8001f9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001f9c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a34      	ldr	r2, [pc, #208]	; (800209c <TIM_Base_SetConfig+0xe4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00f      	beq.n	8001ff0 <TIM_Base_SetConfig+0x38>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd6:	d00b      	beq.n	8001ff0 <TIM_Base_SetConfig+0x38>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a31      	ldr	r2, [pc, #196]	; (80020a0 <TIM_Base_SetConfig+0xe8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d007      	beq.n	8001ff0 <TIM_Base_SetConfig+0x38>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a30      	ldr	r2, [pc, #192]	; (80020a4 <TIM_Base_SetConfig+0xec>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d003      	beq.n	8001ff0 <TIM_Base_SetConfig+0x38>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a2f      	ldr	r2, [pc, #188]	; (80020a8 <TIM_Base_SetConfig+0xf0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d108      	bne.n	8002002 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a25      	ldr	r2, [pc, #148]	; (800209c <TIM_Base_SetConfig+0xe4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d01b      	beq.n	8002042 <TIM_Base_SetConfig+0x8a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002010:	d017      	beq.n	8002042 <TIM_Base_SetConfig+0x8a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a22      	ldr	r2, [pc, #136]	; (80020a0 <TIM_Base_SetConfig+0xe8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d013      	beq.n	8002042 <TIM_Base_SetConfig+0x8a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a21      	ldr	r2, [pc, #132]	; (80020a4 <TIM_Base_SetConfig+0xec>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00f      	beq.n	8002042 <TIM_Base_SetConfig+0x8a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a20      	ldr	r2, [pc, #128]	; (80020a8 <TIM_Base_SetConfig+0xf0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00b      	beq.n	8002042 <TIM_Base_SetConfig+0x8a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a1f      	ldr	r2, [pc, #124]	; (80020ac <TIM_Base_SetConfig+0xf4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d007      	beq.n	8002042 <TIM_Base_SetConfig+0x8a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a1e      	ldr	r2, [pc, #120]	; (80020b0 <TIM_Base_SetConfig+0xf8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d003      	beq.n	8002042 <TIM_Base_SetConfig+0x8a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a1d      	ldr	r2, [pc, #116]	; (80020b4 <TIM_Base_SetConfig+0xfc>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d108      	bne.n	8002054 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	4313      	orrs	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a08      	ldr	r2, [pc, #32]	; (800209c <TIM_Base_SetConfig+0xe4>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d103      	bne.n	8002088 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	615a      	str	r2, [r3, #20]
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40010000 	.word	0x40010000
 80020a0:	40000400 	.word	0x40000400
 80020a4:	40000800 	.word	0x40000800
 80020a8:	40000c00 	.word	0x40000c00
 80020ac:	40014000 	.word	0x40014000
 80020b0:	40014400 	.word	0x40014400
 80020b4:	40014800 	.word	0x40014800

080020b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	f023 0201 	bic.w	r2, r3, #1
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f023 0303 	bic.w	r3, r3, #3
 80020ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f023 0302 	bic.w	r3, r3, #2
 8002100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4313      	orrs	r3, r2
 800210a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a1c      	ldr	r2, [pc, #112]	; (8002180 <TIM_OC1_SetConfig+0xc8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d10c      	bne.n	800212e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f023 0308 	bic.w	r3, r3, #8
 800211a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	4313      	orrs	r3, r2
 8002124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f023 0304 	bic.w	r3, r3, #4
 800212c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a13      	ldr	r2, [pc, #76]	; (8002180 <TIM_OC1_SetConfig+0xc8>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d111      	bne.n	800215a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800213c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	621a      	str	r2, [r3, #32]
}
 8002174:	bf00      	nop
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	40010000 	.word	0x40010000

08002184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002184:	b480      	push	{r7}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	f023 0210 	bic.w	r2, r3, #16
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f023 0320 	bic.w	r3, r3, #32
 80021ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4313      	orrs	r3, r2
 80021da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <TIM_OC2_SetConfig+0xd4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d10d      	bne.n	8002200 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a15      	ldr	r2, [pc, #84]	; (8002258 <TIM_OC2_SetConfig+0xd4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d113      	bne.n	8002230 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800220e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	621a      	str	r2, [r3, #32]
}
 800224a:	bf00      	nop
 800224c:	371c      	adds	r7, #28
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40010000 	.word	0x40010000

0800225c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f023 0303 	bic.w	r3, r3, #3
 8002292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	021b      	lsls	r3, r3, #8
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a1d      	ldr	r2, [pc, #116]	; (800232c <TIM_OC3_SetConfig+0xd0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d10d      	bne.n	80022d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a14      	ldr	r2, [pc, #80]	; (800232c <TIM_OC3_SetConfig+0xd0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d113      	bne.n	8002306 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	621a      	str	r2, [r3, #32]
}
 8002320:	bf00      	nop
 8002322:	371c      	adds	r7, #28
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	40010000 	.word	0x40010000

08002330 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800235e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	021b      	lsls	r3, r3, #8
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4313      	orrs	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800237a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	031b      	lsls	r3, r3, #12
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a10      	ldr	r2, [pc, #64]	; (80023cc <TIM_OC4_SetConfig+0x9c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d109      	bne.n	80023a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002396:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	019b      	lsls	r3, r3, #6
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	621a      	str	r2, [r3, #32]
}
 80023be:	bf00      	nop
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40010000 	.word	0x40010000

080023d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e050      	b.n	800248a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4313      	orrs	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1c      	ldr	r2, [pc, #112]	; (8002498 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d018      	beq.n	800245e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002434:	d013      	beq.n	800245e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a18      	ldr	r2, [pc, #96]	; (800249c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d00e      	beq.n	800245e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a16      	ldr	r2, [pc, #88]	; (80024a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d009      	beq.n	800245e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d004      	beq.n	800245e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a13      	ldr	r2, [pc, #76]	; (80024a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d10c      	bne.n	8002478 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002464:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	4313      	orrs	r3, r2
 800246e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40010000 	.word	0x40010000
 800249c:	40000400 	.word	0x40000400
 80024a0:	40000800 	.word	0x40000800
 80024a4:	40000c00 	.word	0x40000c00
 80024a8:	40014000 	.word	0x40014000

080024ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d101      	bne.n	80024c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e03d      	b.n	8002544 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4313      	orrs	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <__libc_init_array>:
 8002550:	b570      	push	{r4, r5, r6, lr}
 8002552:	4e0d      	ldr	r6, [pc, #52]	; (8002588 <__libc_init_array+0x38>)
 8002554:	4c0d      	ldr	r4, [pc, #52]	; (800258c <__libc_init_array+0x3c>)
 8002556:	1ba4      	subs	r4, r4, r6
 8002558:	10a4      	asrs	r4, r4, #2
 800255a:	2500      	movs	r5, #0
 800255c:	42a5      	cmp	r5, r4
 800255e:	d109      	bne.n	8002574 <__libc_init_array+0x24>
 8002560:	4e0b      	ldr	r6, [pc, #44]	; (8002590 <__libc_init_array+0x40>)
 8002562:	4c0c      	ldr	r4, [pc, #48]	; (8002594 <__libc_init_array+0x44>)
 8002564:	f000 f820 	bl	80025a8 <_init>
 8002568:	1ba4      	subs	r4, r4, r6
 800256a:	10a4      	asrs	r4, r4, #2
 800256c:	2500      	movs	r5, #0
 800256e:	42a5      	cmp	r5, r4
 8002570:	d105      	bne.n	800257e <__libc_init_array+0x2e>
 8002572:	bd70      	pop	{r4, r5, r6, pc}
 8002574:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002578:	4798      	blx	r3
 800257a:	3501      	adds	r5, #1
 800257c:	e7ee      	b.n	800255c <__libc_init_array+0xc>
 800257e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002582:	4798      	blx	r3
 8002584:	3501      	adds	r5, #1
 8002586:	e7f2      	b.n	800256e <__libc_init_array+0x1e>
 8002588:	080025e0 	.word	0x080025e0
 800258c:	080025e0 	.word	0x080025e0
 8002590:	080025e0 	.word	0x080025e0
 8002594:	080025e4 	.word	0x080025e4

08002598 <memset>:
 8002598:	4402      	add	r2, r0
 800259a:	4603      	mov	r3, r0
 800259c:	4293      	cmp	r3, r2
 800259e:	d100      	bne.n	80025a2 <memset+0xa>
 80025a0:	4770      	bx	lr
 80025a2:	f803 1b01 	strb.w	r1, [r3], #1
 80025a6:	e7f9      	b.n	800259c <memset+0x4>

080025a8 <_init>:
 80025a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025aa:	bf00      	nop
 80025ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ae:	bc08      	pop	{r3}
 80025b0:	469e      	mov	lr, r3
 80025b2:	4770      	bx	lr

080025b4 <_fini>:
 80025b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025b6:	bf00      	nop
 80025b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ba:	bc08      	pop	{r3}
 80025bc:	469e      	mov	lr, r3
 80025be:	4770      	bx	lr
